package com.licenta.yogi.generatedcontracts;

import io.reactivex.Flowable;
import io.reactivex.functions.Function;
import java.math.BigInteger;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.List;
import org.web3j.abi.EventEncoder;
import org.web3j.abi.TypeReference;
import org.web3j.abi.datatypes.Address;
import org.web3j.abi.datatypes.Event;
import org.web3j.abi.datatypes.Type;
import org.web3j.abi.datatypes.Utf8String;
import org.web3j.abi.datatypes.generated.Uint256;
import org.web3j.crypto.Credentials;
import org.web3j.protocol.Web3j;
import org.web3j.protocol.core.DefaultBlockParameter;
import org.web3j.protocol.core.RemoteCall;
import org.web3j.protocol.core.methods.request.EthFilter;
import org.web3j.protocol.core.methods.response.Log;
import org.web3j.protocol.core.methods.response.TransactionReceipt;
import org.web3j.tx.Contract;
import org.web3j.tx.TransactionManager;
import org.web3j.tx.gas.ContractGasProvider;

/**
 * <p>Auto generated code.
 * <p><strong>Do not modify!</strong>
 * <p>Please use the <a href="https://docs.web3j.io/command_line.html">web3j command line tools</a>,
 * or the org.web3j.codegen.SolidityFunctionWrapperGenerator in the 
 * <a href="https://github.com/web3j/web3j/tree/master/codegen">codegen module</a> to update.
 *
 * <p>Generated with web3j version 4.1.1.
 */
public class VolumeChain extends Contract {
    private static final String BINARY = "";

    public static final String FUNC_ADDPRODUCTS = "addProducts";

    public static final String FUNC_ADDUSER = "addUser";

    public static final String FUNC_GETCREATEDPRODUCTSFIRSTPART = "getCreatedProductsFirstPart";

    public static final String FUNC_GETCREATEDPRODUCTSSECONDPART = "getCreatedProductsSecondPart";

    public static final String FUNC_GETSELLERNAME = "getSellerName";

    public static final String FUNC_GETUSER = "getUser";

    public static final String FUNC_USERSMAP = "usersMap";

    public static final Event ADDUSERTOSUPPLYCHAIN_EVENT = new Event("AddUserToSupplyChain", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>(true) {}, new TypeReference<Uint256>(true) {}, new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}));
    ;

    public static final Event CREATEPRODUCTS_EVENT = new Event("CreateProducts", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>(true) {}, new TypeReference<Address>(true) {}, new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}));
    ;

    @Deprecated
    protected VolumeChain(String contractAddress, Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        super(BINARY, contractAddress, web3j, credentials, gasPrice, gasLimit);
    }

    protected VolumeChain(String contractAddress, Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider) {
        super(BINARY, contractAddress, web3j, credentials, contractGasProvider);
    }

    @Deprecated
    protected VolumeChain(String contractAddress, Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        super(BINARY, contractAddress, web3j, transactionManager, gasPrice, gasLimit);
    }

    protected VolumeChain(String contractAddress, Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        super(BINARY, contractAddress, web3j, transactionManager, contractGasProvider);
    }

    public List<AddUserToSupplyChainEventResponse> getAddUserToSupplyChainEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(ADDUSERTOSUPPLYCHAIN_EVENT, transactionReceipt);
        ArrayList<AddUserToSupplyChainEventResponse> responses = new ArrayList<AddUserToSupplyChainEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            AddUserToSupplyChainEventResponse typedResponse = new AddUserToSupplyChainEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.userAddress = (String) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.userType = (BigInteger) eventValues.getIndexedValues().get(1).getValue();
            typedResponse.name = (String) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.realAddress = (String) eventValues.getNonIndexedValues().get(1).getValue();
            typedResponse.country = (String) eventValues.getNonIndexedValues().get(2).getValue();
            typedResponse.city = (String) eventValues.getNonIndexedValues().get(3).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<AddUserToSupplyChainEventResponse> addUserToSupplyChainEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new Function<Log, AddUserToSupplyChainEventResponse>() {
            @Override
            public AddUserToSupplyChainEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(ADDUSERTOSUPPLYCHAIN_EVENT, log);
                AddUserToSupplyChainEventResponse typedResponse = new AddUserToSupplyChainEventResponse();
                typedResponse.log = log;
                typedResponse.userAddress = (String) eventValues.getIndexedValues().get(0).getValue();
                typedResponse.userType = (BigInteger) eventValues.getIndexedValues().get(1).getValue();
                typedResponse.name = (String) eventValues.getNonIndexedValues().get(0).getValue();
                typedResponse.realAddress = (String) eventValues.getNonIndexedValues().get(1).getValue();
                typedResponse.country = (String) eventValues.getNonIndexedValues().get(2).getValue();
                typedResponse.city = (String) eventValues.getNonIndexedValues().get(3).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<AddUserToSupplyChainEventResponse> addUserToSupplyChainEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(ADDUSERTOSUPPLYCHAIN_EVENT));
        return addUserToSupplyChainEventFlowable(filter);
    }

    public List<CreateProductsEventResponse> getCreateProductsEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(CREATEPRODUCTS_EVENT, transactionReceipt);
        ArrayList<CreateProductsEventResponse> responses = new ArrayList<CreateProductsEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            CreateProductsEventResponse typedResponse = new CreateProductsEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.tokenAddress = (String) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.sellerAddress = (String) eventValues.getIndexedValues().get(1).getValue();
            typedResponse.name = (String) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.id = (String) eventValues.getNonIndexedValues().get(1).getValue();
            typedResponse.symbol = (String) eventValues.getNonIndexedValues().get(2).getValue();
            typedResponse.total = (BigInteger) eventValues.getNonIndexedValues().get(3).getValue();
            typedResponse.length = (BigInteger) eventValues.getNonIndexedValues().get(4).getValue();
            typedResponse.width = (BigInteger) eventValues.getNonIndexedValues().get(5).getValue();
            typedResponse.height = (BigInteger) eventValues.getNonIndexedValues().get(6).getValue();
            typedResponse.productionDate = (BigInteger) eventValues.getNonIndexedValues().get(7).getValue();
            typedResponse.expirationDate = (BigInteger) eventValues.getNonIndexedValues().get(8).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<CreateProductsEventResponse> createProductsEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new Function<Log, CreateProductsEventResponse>() {
            @Override
            public CreateProductsEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(CREATEPRODUCTS_EVENT, log);
                CreateProductsEventResponse typedResponse = new CreateProductsEventResponse();
                typedResponse.log = log;
                typedResponse.tokenAddress = (String) eventValues.getIndexedValues().get(0).getValue();
                typedResponse.sellerAddress = (String) eventValues.getIndexedValues().get(1).getValue();
                typedResponse.name = (String) eventValues.getNonIndexedValues().get(0).getValue();
                typedResponse.id = (String) eventValues.getNonIndexedValues().get(1).getValue();
                typedResponse.symbol = (String) eventValues.getNonIndexedValues().get(2).getValue();
                typedResponse.total = (BigInteger) eventValues.getNonIndexedValues().get(3).getValue();
                typedResponse.length = (BigInteger) eventValues.getNonIndexedValues().get(4).getValue();
                typedResponse.width = (BigInteger) eventValues.getNonIndexedValues().get(5).getValue();
                typedResponse.height = (BigInteger) eventValues.getNonIndexedValues().get(6).getValue();
                typedResponse.productionDate = (BigInteger) eventValues.getNonIndexedValues().get(7).getValue();
                typedResponse.expirationDate = (BigInteger) eventValues.getNonIndexedValues().get(8).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<CreateProductsEventResponse> createProductsEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(CREATEPRODUCTS_EVENT));
        return createProductsEventFlowable(filter);
    }

    public RemoteCall<TransactionReceipt> addProducts(String tokenAddress, String name, String id, String symbol, BigInteger total, BigInteger length, BigInteger width, BigInteger height, String sellerAddress, BigInteger productionDate, BigInteger expirationDate, String restrictedCountries) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_ADDPRODUCTS, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(tokenAddress), 
                new org.web3j.abi.datatypes.Utf8String(name), 
                new org.web3j.abi.datatypes.Utf8String(id), 
                new org.web3j.abi.datatypes.Utf8String(symbol), 
                new org.web3j.abi.datatypes.generated.Uint256(total), 
                new org.web3j.abi.datatypes.generated.Uint256(length), 
                new org.web3j.abi.datatypes.generated.Uint256(width), 
                new org.web3j.abi.datatypes.generated.Uint256(height), 
                new org.web3j.abi.datatypes.Address(sellerAddress), 
                new org.web3j.abi.datatypes.generated.Uint256(productionDate), 
                new org.web3j.abi.datatypes.generated.Uint256(expirationDate), 
                new org.web3j.abi.datatypes.Utf8String(restrictedCountries)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<TransactionReceipt> addUser(String userAddress, BigInteger userType, String name, String realAddress, String country, String city) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_ADDUSER, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(userAddress), 
                new org.web3j.abi.datatypes.generated.Uint256(userType), 
                new org.web3j.abi.datatypes.Utf8String(name), 
                new org.web3j.abi.datatypes.Utf8String(realAddress), 
                new org.web3j.abi.datatypes.Utf8String(country), 
                new org.web3j.abi.datatypes.Utf8String(city)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<TransactionReceipt> getCreatedProductsFirstPart(String tokenAddress) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_GETCREATEDPRODUCTSFIRSTPART, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(tokenAddress)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<TransactionReceipt> getCreatedProductsSecondPart(String tokenAddress) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_GETCREATEDPRODUCTSSECONDPART, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(tokenAddress)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<TransactionReceipt> getSellerName(String tokenAddress) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_GETSELLERNAME, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(tokenAddress)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<TransactionReceipt> getUser(String userAddress) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_GETUSER, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(userAddress)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<TransactionReceipt> usersMap(String param0) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_USERSMAP, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(param0)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    @Deprecated
    public static VolumeChain load(String contractAddress, Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        return new VolumeChain(contractAddress, web3j, credentials, gasPrice, gasLimit);
    }

    @Deprecated
    public static VolumeChain load(String contractAddress, Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        return new VolumeChain(contractAddress, web3j, transactionManager, gasPrice, gasLimit);
    }

    public static VolumeChain load(String contractAddress, Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider) {
        return new VolumeChain(contractAddress, web3j, credentials, contractGasProvider);
    }

    public static VolumeChain load(String contractAddress, Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        return new VolumeChain(contractAddress, web3j, transactionManager, contractGasProvider);
    }

    public static RemoteCall<VolumeChain> deploy(Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider) {
        return deployRemoteCall(VolumeChain.class, web3j, credentials, contractGasProvider, BINARY, "");
    }

    public static RemoteCall<VolumeChain> deploy(Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        return deployRemoteCall(VolumeChain.class, web3j, transactionManager, contractGasProvider, BINARY, "");
    }

    @Deprecated
    public static RemoteCall<VolumeChain> deploy(Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        return deployRemoteCall(VolumeChain.class, web3j, credentials, gasPrice, gasLimit, BINARY, "");
    }

    @Deprecated
    public static RemoteCall<VolumeChain> deploy(Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        return deployRemoteCall(VolumeChain.class, web3j, transactionManager, gasPrice, gasLimit, BINARY, "");
    }

    public static class AddUserToSupplyChainEventResponse {
        public Log log;

        public String userAddress;

        public BigInteger userType;

        public String name;

        public String realAddress;

        public String country;

        public String city;
    }

    public static class CreateProductsEventResponse {
        public Log log;

        public String tokenAddress;

        public String sellerAddress;

        public String name;

        public String id;

        public String symbol;

        public BigInteger total;

        public BigInteger length;

        public BigInteger width;

        public BigInteger height;

        public BigInteger productionDate;

        public BigInteger expirationDate;
    }
}
